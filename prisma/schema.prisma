generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  images        Image[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  originalName String
  size         Int
  format       String
  key          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transformedImages TransformedImage[]
}

model TransformedImage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  originalImageId String   @db.ObjectId
  key             String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  originalImage  Image           @relation(fields: [originalImageId], references: [id], onDelete: Cascade)
  transformation Transformation?
}

model Transformation {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  transformedImageId String   @unique @db.ObjectId
  width              Int?
  height             Int?
  grayscale          Boolean?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  transformedImage TransformedImage @relation(fields: [transformedImageId], references: [id], onDelete: Cascade)
}
